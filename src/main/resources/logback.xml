<?xml version="1.0" encoding="UTF-8" ?>
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="1800 seconds"
	debug="false">
	<!-- 每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。 -->
	<contextName>mfd</contextName>

	<!-- 用来定义变量值的标签，<property> 有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。 
		通过<property>定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 -->
	<property name="USER_HOME" value="logs" />
	<property scope="context" name="FILE_NAME" value="mfd-logback" />

	<!-- key:标识此<timestamp> 的名字；datePattern：设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式。 -->
	<timestamp key="byDay" datePattern="yyyy-MM-dd" />

	<!--  标准输出，打印到控制台 -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<!-- 对日志进行格式化 -->
		<encoder>
			<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n
			</pattern>
		</encoder>
	</appender>

	<!-- name指定appender名称，class指定appender的全限定名。 -->
	<appender name="file"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。 -->
		<file>${USER_HOME}/${FILE_NAME}.log</file>
		<!-- 如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。 -->
		<append>true</append>

		<!-- 示例：每天生成一个日志文件，保存30天的日志文件 -->
		<!-- <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"> -->
		<!-- <fileNamePattern>logFile.%d{yyyy-MM-dd}.log</fileNamePattern> -->
		<!-- <maxHistory>30</maxHistory> -->
		<!-- </rollingPolicy> -->

		<!-- 按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。窗口大小是1到10，当保存了3个归档文件后，将覆盖最早的日志。 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
			<!-- 相对路径，日志保存到tomcat下的bin目录中 -->
			<fileNamePattern>${USER_HOME}/${byDay}/${FILE_NAME}-${byDay}-%i.log.zip
			</fileNamePattern>
			<minIndex>1</minIndex> 
			<maxIndex>10</maxIndex>
		</rollingPolicy>

		<!-- 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动。 -->
		<triggeringPolicy
			class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<!-- 活动文件的大小，默认值是10MB。 -->
			<maxFileSize>5MB</maxFileSize>
		</triggeringPolicy>
		<encoder>
			<pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n
			</pattern>
		</encoder>

	</appender>

	<!-- 用来设置某一个包或者具体的某一个类的日志打印级别、以及指定 appender。仅有一个name属性，一个可选的level和一个可选的addtivity属性。 
		<loger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。 -->
	<!-- name:用来指定受此loger约束的某一个包或者具体的某一个类。 -->
	<!-- level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。 -->
	<!-- addtivity:是否向上级loger传递打印信息。默认是true。 -->
	<logger name="com.rtmap.traffic.mfd" level="debug" additivity="true">
		<appender-ref ref="file" />
	</logger>

	<!-- root将级别为“INFO”及大于“INFO”的日志信息交给已经配置好的名为“STDOUT”的appender处理，“STDOUT”appender将信息打印到控制台。 -->
	<root level="info">
		<appender-ref ref="STDOUT" />
	</root>
</configuration>